# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import image_classification_service_pb2 as image__classification__service__pb2


class ImageClassificationServiceStub(object):
    # missing associated documentation comment in .proto file
    pass

    def __init__(self, channel):
        """Constructor.

    Args:
      channel: A grpc.Channel.
    """
        self.RecognizeImage = channel.unary_unary(
            '/ImageClassificationServiceRPC.ImageClassificationService/RecognizeImage',
            request_serializer=image__classification__service__pb2.ImageRequest.
            SerializeToString,
            response_deserializer=image__classification__service__pb2.
            ImageResponse.FromString,
        )


class ImageClassificationServiceServicer(object):
    # missing associated documentation comment in .proto file
    pass

    def RecognizeImage(self, request, context):
        # missing associated documentation comment in .proto file
        pass
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ImageClassificationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'RecognizeImage':
            grpc.unary_unary_rpc_method_handler(
                servicer.RecognizeImage,
                request_deserializer=image__classification__service__pb2.
                ImageRequest.FromString,
                response_serializer=image__classification__service__pb2.
                ImageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'ImageClassificationServiceRPC.ImageClassificationService',
        rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler, ))
